# Source outer files
[[ -e ${HOME}/.zshrc.$HOST ]] && source ${HOME}/.zshrc.$HOST

export LANG=en_US.UTF-8
export LESS=-XR
export EDITOR='nvim'
export VISUAl=$EDITOR
export TERM=xterm-256color

path=(${HOME}/.local/bin ${HOME}/usr/bin ${HOME}/usr/scripts $path)

# Hyphen-insensitive completion.
HYPHEN_INSENSITIVE="true"

# Disable auto-setting terminal title.
DISABLE_AUTO_TITLE="true"

# Enable command auto-correction.
ENABLE_CORRECTION="true"

# Display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Disable marking untracked files under VCS as dirty.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Change the command execution time
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="yyyy-mm-dd"

# Autoloads
autoload -Uz +X compinit && compinit
autoload -U +X bashcompinit && compinit
autoload -U promptinit
autoload -U run-help
alias help=run-help
autoload -U colors && colors

# Zstyle
zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'
zstyle ':completion:*' list-colors 'di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
zstyle ":completion:*:commands" rehash 1

# completion using a menu and vi keys
zstyle ':completion:*' menu select
zmodload zsh/complist
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history


zstyle :compinstall filename '~/.zshrc'


# SETOPTS

# Shell options

setopt EXTENDEDGLOB
setopt NOMATCH
setopt NULL_GLOB
setopt NOTIFY
setopt INTERACTIVE_COMMENTS
unsetopt BEEP

## Changing Directories

# if command is name of directory, cd into that directory
setopt AUTO_CD

# make `cd' push the old directory onto the directory stack
setopt AUTO_PUSHD

# don't push multiple copies of the same directory onto the dir stack
setopt PUSHD_IGNORE_DUPS

# `pushd' with no arguments will pushd to $HOME
setopt PUSHD_TO_HOME


## Completions

# automatically list choices on an ambiguous completion
setopt AUTO_LIST

# auto-list even if nothing could be inserted
setopt LIST_AMBIGUOUS


## HISTORY

# History Settings
export HISTIGNORE="&:ls:[bf]g:exit:reset:clear:cd:cd ..:cd.."

# zsh session append history to histfile, rather than replace it.
setopt APPEND_HISTORY

# don't display duplicates when searching history in the line editor
setopt HIST_FIND_NO_DUPS

# rm from history commands when first char is a space
setopt HIST_IGNORE_SPACE

# when writing history file, older commands that are dups are omitted
setopt HIST_SAVE_NO_DUPS

# perform history expansion and then load into buffer before running
setopt HIST_VERIFY

# new command bumps duplicates from hist list
setopt HIST_IGNORE_DUPS

# don't enter commands into hist list if duplicates of previous event
setopt HIST_IGNORE_ALL_DUPS

# lock histfile using fcntl call
setopt HIST_FCNTL_LOCK

# history lines added to histfile incrementally, rather then waiting until exit
setopt INC_APPEND_HISTORY

# imports new commands from histfile and causes typed commands to be appended
setopt SHARE_HISTORY

export HISTSIZE=1000000
export HISTFILE=~/.zhistory
export SAVEHIST=10000000

# no need to nice backgrounded processes
setopt NO_BG_NICE

# KEYMAP
function zle-keymap-select() {
    zle reset-prompt
    zle -R
}

zle -N zle-keymap-select
zle -N edit-command-line

# Vim mode
bindkey -v
bindkey ",," vi-cmd-mode

bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word

bindkey '^a' beginning-of-line
bindkey '^e' end-of-line

bindkey '^b' backward-word
bindkey '^f' forward-word

# V' in vi-cmd-mode will edit current line in Vim

autoload edit-command-line
bindkey -M vicmd 'V' edit-command-line

# Search through history forward and backward using ^R, ^N
bindkey '^R' history-incremental-search-backward
bindkey '^N' history-incremental-search-forward

# Scroll up and down through history
bindkey '^k' up-history
bindkey '^j' down-history


# Prompt
# PROMPT="%(1j.[%j] .)%{$fg[yellow]%}%n%{$reset_color%}@%{$fg[green]%}%m%{$reset_color%} %3~
# %{$fg[white]%}λ%{$reset_color%} "
# PS1="%(1j.[%j] .)%{$fg[blue]%}%3~ %{$fg[magenta]%}λ%{$reset_color%} "
# PS1="%(1j.[%j] .)%{$fg[blue]%}%~ %{$fg[magenta]%}λ%{$reset_color%} "

# XDG
export XDG_CONFIG_HOME=${HOME}/.config
export XDG_DATA_HOME=${HOME}/.local/share
export XDG_CACHE_HOME=${HOME}/.cache
export XDG_RUNTIME_DIR=${HOME}/.local/runtime
# export XDG_CONFIGDIRS=/etc/xdg
export XDG_DATA_DIRS=${XDG_DATA_DIRS}:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop

# XCompose
export QT_IM_MODULE=xum
export GTK_IM_MODULE=uim
unset XMODIFIERS

# FASD https://github.com/clvv/fasd {{{
if which fasd &> /dev/null
then
    eval "$(fasd --init auto)"
    # init cache
    fasd_cache="$HOME/.fasd-init-cache"
    if [ "$(command -v fasd)" -nt "$fasd_cache" -o ! -s "$fasd_cache" ]; then
          fasd --init posix-alias zsh-hook zsh-ccomp zsh-ccomp-install \
              zsh-wcomp zsh-wcomp-install >| "$fasd_cache"
    fi
    source "$fasd_cache"
    unset fasd_cache
    # -- completions
    # C-p to do fasd-complete (files and directories)
    bindkey '^P' 'fasd-complete'
    # C-x C-f to do fasd-complete-f (only files)
    bindkey '^X^F' 'fasd-complete-f'
    # C-x C-d to do fasd-complete-d (only directories)
    bindkey '^X^D' 'fasd-complete-d'
fi
# }}}

# pip zsh completion start {{{
function _pip_completion {
  local words cword
  read -Ac words
  read -cn cword
  reply=( $( COMP_WORDS="$words[*]" \
             COMP_CWORD=$(( cword-1 )) \
             PIP_AUTO_COMPLETE=1 $words[1] ) )
}
compctl -K _pip_completion pip
# pip zsh completion end }}}

# ZPLUG
source ${HOME}/.zplug/init.zsh

# auto-autosuggestions
zplug "zsh-users/zsh-autosuggestions"
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
bindkey '^ ' autosuggest-accept

zplug "zsh-users/zsh-syntax-highlighting", defer:2

zplug "hlissner/zsh-autopair", defer:2

zplug 'zplug/zplug', hook-build:'zplug --self-manage'

# Powerlevel9k, https://github.com/Powerlevel9k/powerlevel9k
zplug "bhilburn/powerlevel9k", use:powerlevel9k.zsh-theme
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(status background_jobs dir)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(vcs vi_mode history time)

if ! zplug check --verbose; then
    printf "Install? [y|N]: "
    if read -q; then
        echo; zplug install
    fi
fi

zplug load # --verbose

source ${configdir}/shell/aliases
source ${configdir}/shell/functions

export PATH=${PATH/:\/bin/}:/bin

if which neofetch &> /dev/null
then
    neofetch
fi
