" Syntastic

"stick any detected errors into loc_list
let g:syntastic_always_populate_loc_list = 1

"error window will be automatically opened when errors are detected,
"and closed when none are detected.
let g:syntastic_auto_loc_list = 1

" the err list is too damn high
function! SyntasticCheckHook(errors)
    if !empty(a:errors)
        let g:syntastic_loc_list_height = min([len(a:errors), 10])
    endif
endfunction


" check on open
let g:syntastic_check_on_open = 0

" don't check on wq
let g:syntastic_check_on_wq = 0

" which checker's yelling at me?
let g:syntastic_id_checkers = 1

" show errors from all checkers
" let g:syntastic_aggregate_errors = 1

" enable balloons?
let g:syntax_enable_baloons = 1

" fancy color?
highlight SyntasticError guibg=#2f0000

" work around false flagging legit python3 constructs
if has("mac")
    let g:syntastic_python_python_exec = '/usr/local/bin/python3'
else
    let g:syntastic_python_python_exec = '/usr/bin/python3'
endif

" Let syntastic check for racket errors
let g:syntastic_enable_racket_racket_checker = 1

let g:syntastic_python_checkers = ['flake8', 'python', 'pep8']
let g:syntastic_haskell_checkers = ['hlint', 'ghc_mod']
let g:syntastic_error_symbol='✗'
let g:syntastic_style_warning_symbol='†'
let g:syntastic_warning_symbol='⚠'


" Omnicompletion
set omnifunc=syntaxcomplete#Complete
set completeopt=longest,menuone,preview

autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif "close preview window

"Python
let python_highlight_all = 1
let g:pydoc_open_cmd = 'vsplit'
let g:pydoc_highlight=0

"Clojure
let g:clojure_align_multiline_strings = 1


"Taglist/Ctags
" let Tlist_Ctags_Cmd                 ='~/usr/bin/ctags'
" let Tlist_GainFocus_On_ToggleOpen   = 1
" let Tlist_Close_On_Select           = 0        "don't close on select
" let Tlist_Use_Right_Window          = 1
" let Tlist_File_Fold_Auto_Close      = 1

"NERD_tree
let NERDTreeShowLineNumbers = 1
" more colors = 1
let NERDChristmasTree = 0

"Rainbow Parenthesis
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

"Airline
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.maxlinenr = ' ' "''

let g:airline#extensions#tmuxline#enabled = 0

" NeoComplete
let g:neocomplete#enable_at_startup = 1

 " Use smartcase.
let g:neocomplete#enable_smart_case = 1

  "" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 1
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

 " Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
     \ 'default' : '',
     \ 'vimshell' : $HOME.'/.vimshell_hist',
     \ 'scheme' : $HOME.'/.gosh_completions'
     \ }
"
" Set certain words to indent according to standard lisp patters.
set lispwords+=public-method,override-method,private-method,syntax-case,syntax-rules


" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif

let g:neocomplete#keyword_patterns['default'] = '\h\w*'

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>

function! s:my_cr_function()
    return neocomplete#close_popup() . "\<CR>"
    "For no inserting <CR> key.
    return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"

inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

" VimSlime
let g:slime_target = "tmux"
let g:slime_paste_file = tempname()

" vim: ft=vim
