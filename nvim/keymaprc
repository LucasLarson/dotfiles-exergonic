" Mapping

"let g:which_key_map = {}

let mapleader = "\<Space>"

"Avoid escape
inoremap ,, <Esc>
vnoremap ,, <Esc>

"Easy quit / save and quit etc
nnoremap <silent><Leader>q :q<CR>
nnoremap <silent><Leader>qa :qa<CR>
nnoremap <silent><Leader>x :x<CR>
nnoremap <silent><Leader>xa :xa<CR>


""Buffers
nnoremap <silent><Leader>bb :b #<CR>
nnoremap <silent><Leader>bl :ls<CR>
nnoremap <silent><Leader>bd :bdelete<CR>

"let g:which_key_map['b'] = {
"            \ 'name' : '+buffers' ,
"            \ 'b' : [':b #', 'last-buffer'] ,
"            \ 'd' : [':bdelete', 'delete-buffer'] ,
"            \ 'l' : [':ls', 'list-buffers'] ,
"            \ 'w' : [':w', 'write-buffer']
"            \ }


""Tab movement
nnoremap <silent><Leader>tl :tabnext<CR>
nnoremap <silent><Leader>th :tabprev<CR>
nnoremap <silent><Leader>tn :tabnew<CR>
"let g:which_key_map['t'] = {
"            \ 'name' : '+tabs' ,
"            \ 'l' : [':tabnext' , 'next-tab'] ,
"            \ 'h' : [':tabprev', 'previous-tab'],
"            \ 'n' : [':tabnew' , 'new-tab']
"            \}


" Viewport Controls, ie moving between split panes
nnoremap <Leader>wj <C-w>j
nnoremap <Leader>wk <C-w>k
nnoremap <Leader>wh <C-w>h
nnoremap <Leader>wl <C-w>l
" Move windows
nnoremap <Leader>wJ <C-w>J
nnoremap <Leader>wK <C-w>K
nnoremap <Leader>wH <C-w>H
nnoremap <Leader>wL <C-w>L

"let g:which_key_map['w'] = {
"            \ 'name' : '+windows' ,
"            \ 'j' : ['<C-w>j' , 'pane-down'] ,
"            \ 'k' : ['<C-w>k', 'pane-up'] ,
"            \ 'h' : ['<C-w>h' , 'pane-left'] ,
"            \ 'l' : ['<C-w>l' , 'pane-right'] ,
"            \ 'J' : ['<C-w>J' , 'move-pane-down'] ,
"            \ 'K' : ['<C-w>K' , 'move-pane-up'] ,
"            \ 'H' : ['<C-w>H' , 'move-pane-left'] ,
"            \ 'L' : ['<C-w>L' , 'move-pane-right'] ,
"            \ '<' : ['<C-w>5<' , 'decrease-panel-width'] ,
"            \ '>' : ['<C-w>5>' , 'increase-panel-width'] ,
"            \}

nnoremap <Leader>w<Left> 5<C-w><
nnoremap <Leader>w<Right> 5<C-w>>

" Editing files

"open file under cursor in vertical split
nnoremap <silent><Leader>fv :vertical wincmd f<CR>

"open file under cursor in horizotal split
nnoremap <silent><Leader>fh :wincmd f<CR>

"open file under cursor in new tab
nnoremap <silent><Leader>ft :wincmd gf<CR>


" NerdTree
"let g:which_key_map['n'] = [':NERDTreeToggle', 'NerdTree']
nnoremap <silent><Leader>n :NERDTreeToggle<CR>

" Compile current buffer into binary
"let g:which_key_map['m'] = [':!compile.sh %<cr>', 'compile-binary']
nnoremap <Leader>m :!compile.sh %<cr>

" Grab output from last fireplace call
nnoremap <Leader>gf :call GrabLastFromFireplace()<CR>

""""" Paste Mode
"let g:which_key_map['p'] = [':set invpaste paste?', 'invert-paste']
nnoremap <silent><Leader>p :set invpaste paste?<CR>

"Edit vimrc
nnoremap <silent><Leader>fvv :tabnew ~/.config/nvim/init.vim<cr>

"Edit keymaprc
nnoremap <silent><Leader>fvk :tabnew ~/.config/nvim/keymaprc<cr>

"Edit pluginrc
nnoremap <silent><Leader>fvp :tabnew ~/.config/nvim/pluginrc<cr>

"Source vimrc
nnoremap <Leader>vs :source ~/.config/nvim/init.vim<cr>


"invert listing lisptchars
nnoremap <silent><Leader>il :set invlist<CR>

"Space-o toggles folds
nnoremap <Leader>o za
vnoremap <Leader>o za

nmap <C-j> 3j3<C-e>
nmap <C-k> 3k3<C-y>

nnoremap <silent>tu :call GHC_BrowseAll()<CR>
nnoremap <silent>tw :call GHC_BrowseAll(1)<CR>

"call which_key#register('<Space>', "g:which_key_map")

" vim: ft=vim
